import supabase from "./supabase.js";
import dotenv from "dotenv";
import { Telegraf } from "telegraf";
import axios from "axios";
import { v4 as uuidv4 } from "uuid";

console.log("NODE_ENV:", process.env.NODE_ENV);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (process.env.NODE_ENV === "development") {
  dotenv.config({ path: ".env.development" });
  console.log("–ó–∞–≥—Ä—É–∂–µ–Ω .env.development");
} else {
  dotenv.config();
  console.log("–ó–∞–≥—Ä—É–∂–µ–Ω .env");
}

console.log("FRONTEND_URL –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏:", process.env.FRONTEND_URL);

const bot = new Telegraf(process.env.BOT_TOKEN);
const CHANNEL = process.env.CHANNEL_USERNAME;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ URL
const APP_URL =
  process.env.NODE_ENV === "development"
    ? "http://localhost:3000"
    : process.env.FRONTEND_URL || "https://your-production-domain.com";

console.log("APP_URL:", APP_URL);

async function checkSubscription(ctx) {
  try {
    const res = await axios.get(
      `https://api.telegram.org/bot${process.env.BOT_TOKEN}/getChatMember`,
      {
        params: {
          chat_id: CHANNEL,
          user_id: ctx.from.id,
        },
      }
    );
    const status = res.data.result.status;
    return ["member", "administrator", "creator"].includes(status);
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:", e.response?.data || e);
    return false;
  }
}

bot.start(async (ctx) => {
  const isSubscribed = await checkSubscription(ctx);

  if (!isSubscribed) {
    return ctx.replyWithMarkdown(
      `üëã *–ü—Ä–∏–≤–µ—Ç, ${
        ctx.from.first_name || "–¥—Ä—É–≥"
      }!*\n\nüîê –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω(–∞) –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª.\n\nüëâ –ü–æ–¥–ø–∏—à–∏—Å—å: [–ø–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É](https://t.me/${CHANNEL.replace(
        "@",
        ""
      )})\n\n–ó–∞—Ç–µ–º –≤–µ—Ä–Ω–∏—Å—å —Å—é–¥–∞ –∏ –Ω–∞–ø–∏—à–∏ /start –µ—â—ë —Ä–∞–∑.`
    );
  }

  const token = uuidv4();
  console.log(`DEBUG: Generated token for user ${ctx.from.id}: ${token}`);

  const { error, data: insertData } = await supabase
    .from("auth_tokens")
    .insert([{ token, user_id: ctx.from.id }]);

  if (error) {
    console.error("Supabase insert error:", error);
    return ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏.");
  }

  console.log("DEBUG: Supabase insert result:", insertData);

  const authLink = `${APP_URL}/auth?token=${token}`;
  return ctx.replyWithMarkdown(
    `‚úÖ *–û—Ç–ª–∏—á–Ω–æ!*\n–í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞:\n\nüëâ [–í–æ–π—Ç–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É](${authLink})\n\nüî• –£–≤–∏–¥–∏–º—Å—è –≤–Ω—É—Ç—Ä–∏!`
  );
});

bot.launch();
console.log("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω");
