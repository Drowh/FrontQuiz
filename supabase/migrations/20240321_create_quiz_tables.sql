-- Удаляем старые таблицы, если они существуют
DROP TABLE IF EXISTS quiz_questions CASCADE;
DROP TABLE IF EXISTS quiz_categories CASCADE;
DROP TYPE IF EXISTS quiz_category;

-- Создание enum для категорий
CREATE TYPE quiz_category AS ENUM ('html', 'css', 'javascript');

-- Создание таблицы категорий
CREATE TABLE quiz_categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name quiz_category NOT NULL UNIQUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Создание таблицы вопросов
CREATE TABLE quiz_questions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    category_id BIGINT NOT NULL REFERENCES quiz_categories(id),
    sequence_id INT NOT NULL, -- ID из JSON файла
    question TEXT NOT NULL,
    options JSONB NOT NULL, -- Массив вариантов ответов
    correct_answer INT NOT NULL, -- Индекс правильного ответа
    explanation TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,

    UNIQUE (category_id, sequence_id) -- Уникальный sequence_id в рамках категории
);

-- Создание индексов
CREATE INDEX idx_quiz_questions_category_id ON quiz_questions(category_id);
CREATE INDEX idx_quiz_questions_sequence_id ON quiz_questions(sequence_id);
CREATE INDEX idx_quiz_questions_category_sequence ON quiz_questions(category_id, sequence_id);

-- Создание функции и триггера для автоматического обновления updated_at
CREATE OR REPLACE FUNCTION update_quiz_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = TIMEZONE('utc'::text, NOW());
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_quiz_questions_updated_at
    BEFORE UPDATE ON quiz_questions
    FOR EACH ROW
    EXECUTE FUNCTION update_quiz_updated_at_column();

CREATE TRIGGER update_quiz_categories_updated_at
    BEFORE UPDATE ON quiz_categories
    FOR EACH ROW
    EXECUTE FUNCTION update_quiz_updated_at_column();

-- Создание политик безопасности (RLS)
ALTER TABLE quiz_questions ENABLE ROW LEVEL SECURITY;
ALTER TABLE quiz_categories ENABLE ROW LEVEL SECURITY;

-- Политики для чтения (все авторизованные и неавторизованные пользователи могут читать)
CREATE POLICY "Allow read access for authenticated and public users" ON quiz_questions
    FOR SELECT
    TO authenticated, public
    USING (true);

CREATE POLICY "Allow read access for authenticated and public users" ON quiz_categories
    FOR SELECT
    TO authenticated, public
    USING (true);

-- Политики для записи (только service_role может изменять)
CREATE POLICY "Allow write access for service role" ON quiz_questions
    FOR ALL
    TO service_role
    USING (true)
    WITH CHECK (true);

CREATE POLICY "Allow write access for service role" ON quiz_categories
    FOR ALL
    TO service_role
    USING (true)
    WITH CHECK (true);

-- Вставка категорий
INSERT INTO quiz_categories (name) VALUES
    ('html'),
    ('css'),
    ('javascript'); 